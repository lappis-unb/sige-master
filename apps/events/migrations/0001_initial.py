# Generated by Django 5.0.4 on 2024-05-15 18:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('transductors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=3)),
                ('severity', models.IntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical')])),
                ('category', models.IntegerField(choices=[(1, 'Voltage'), (2, 'Connection'), (3, 'Consumption'), (4, 'Generation'), (5, 'Measurement'), (6, 'Other')])),
            ],
            options={
                'verbose_name': 'Event Type',
                'verbose_name_plural': 'Event Types',
            },
        ),
        migrations.CreateModel(
            name='CumulativeMeasurementTrigger',
            fields=[
                ('trigger_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.trigger')),
                ('dynamic_metric', models.CharField(choices=[('hourly_avg', 'Hourly Average'), ('hourly_max', 'Hourly Maximum'), ('hourly_min', 'Hourly Minimum')], max_length=32)),
                ('adjustment_factor', models.FloatField(default=0)),
                ('period_days', models.PositiveIntegerField(default=7)),
                ('field_name', models.CharField(choices="[('active_consumption', 'active consumption'), ('active_generated', 'active generated'), ('reactive_inductive', 'reactive inductive'), ('reactive_capacitive', 'reactive capacitive')]", max_length=64)),
            ],
            options={
                'verbose_name': 'Cumulative Measurement Trigger',
                'verbose_name_plural': 'Cumulative Measurement Triggers',
            },
            bases=('events.trigger',),
        ),
        migrations.CreateModel(
            name='InstantMeasurementTrigger',
            fields=[
                ('trigger_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.trigger')),
                ('operator', models.CharField(choices=[('gt', '> (Greater Than)'), ('gte', '>= (Greater Than or Equal)'), ('lt', '< (Less Than)'), ('lte', '<= (Less Than or Equal)'), ('exact', '== (Equal)'), ('ne', '!= (Not Equal)')], max_length=5)),
                ('active_threshold', models.FloatField(blank=True, null=True)),
                ('deactivate_threshold', models.FloatField(blank=True, null=True)),
                ('field_name', models.CharField(choices="[('frequency_a', 'frequency a'), ('frequency_b', 'frequency b'), ('frequency_c', 'frequency c'), ('frequency_iec', 'frequency iec'), ('voltage_a', 'voltage a'), ('voltage_b', 'voltage b'), ('voltage_c', 'voltage c'), ('current_a', 'current a'), ('current_b', 'current b'), ('current_c', 'current c'), ('active_power_a', 'active power a'), ('active_power_b', 'active power b'), ('active_power_c', 'active power c'), ('total_active_power', 'total active power'), ('reactive_power_a', 'reactive power a'), ('reactive_power_b', 'reactive power b'), ('reactive_power_c', 'reactive power c'), ('total_reactive_power', 'total reactive power'), ('apparent_power_a', 'apparent power a'), ('apparent_power_b', 'apparent power b'), ('apparent_power_c', 'apparent power c'), ('total_apparent_power', 'total apparent power'), ('power_factor_a', 'power factor a'), ('power_factor_b', 'power factor b'), ('power_factor_c', 'power factor c'), ('total_power_factor', 'total power factor'), ('dht_voltage_a', 'dht voltage a'), ('dht_voltage_b', 'dht voltage b'), ('dht_voltage_c', 'dht voltage c'), ('dht_current_a', 'dht current a'), ('dht_current_b', 'dht current b'), ('dht_current_c', 'dht current c')]", max_length=64)),
            ],
            options={
                'verbose_name': 'Instant Measurement Trigger',
                'verbose_name_plural': 'Instant Measurement Triggers',
            },
            bases=('events.trigger',),
        ),
        migrations.AddField(
            model_name='trigger',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.eventtype'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('measurement_trigger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events_trigger', to='events.trigger')),
                ('transductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_transductor', to='transductors.transductor')),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_type', to='events.eventtype')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
    ]
