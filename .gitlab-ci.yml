image: docker:24.0.2

services:
  - docker:dind

stages:
  - build
  - lint
  - test
  - release
  - deploy

variables:
  SERVICE_NAME: master-api
  IMAGE_DB: postgres:15.2-bullseye
  IMAGE_STG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

before_script:
  - docker --version
  - docker compose version
  - mkdir -p logs logs/apps logs/tasks
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  script:
    - docker build --pull -t $IMAGE_STG .
    - docker push $IMAGE_STG

style:
  stage: lint
  before_script:
    - docker compose pull
  script:
    - docker compose run ${SERVICE_NAME} pycodestyle .
  allow_failure: true

test:
  stage: test
  before_script:
    - docker build --pull -t $IMAGE_STG .
    - docker compose up -d
    - docker compose exec ${SERVICE_NAME} sh -c "mkdir -p /sige-master/logs/apps /sige-master/logs/tasks && chmod -R 777 /sige-master/logs"
    - docker compose exec ${SERVICE_NAME} sh -c "if [ -d '/sige-master/logs/apps' ]; then echo 'Logs directory exists'; else echo 'Logs directory missing'; fi"
  script:
    - docker compose exec ${SERVICE_NAME} python manage.py test --verbosity=3
    - docker compose exec ${SERVICE_NAME} coverage run manage.py test
    - docker compose exec ${SERVICE_NAME} coverage report reference
    - docker compose exec ${SERVICE_NAME} coverage xml -o coverage.xml
  after_script:
    - docker compose down
  artifacts:
    paths:
      - coverage.xml

release-image:
  stage: release
  script:
    - docker pull $IMAGE_STG
    - docker tag $IMAGE_STG $RELEASE_IMAGE
    - docker push $RELEASE_IMAGE
  dependencies:
    - build
  only:
    changes:
      - Dockerfile

deploy:
  stage: deploy
  script:
    # - ./scrips/deploy.sh
    echo "Falta fazer o script de deployment!"
    echo "SSH ou Local Gitlab Runner?"
  dependencies:
    - build
  only:
    - main
  environment: production
