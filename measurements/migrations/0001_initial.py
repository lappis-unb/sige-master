# Generated by Django 3.0.2 on 2020-04-07 08:02

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='MinutelyMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_date', models.DateTimeField(help_text='This field is required', verbose_name='Collection time')),
                ('frequency_a', models.FloatField(default=0, verbose_name='Frequency')),
                ('voltage_a', models.FloatField(default=0, verbose_name='Voltage at phase A')),
                ('voltage_b', models.FloatField(default=0, verbose_name='Voltage at phase B')),
                ('voltage_c', models.FloatField(default=0, verbose_name='Voltage at phase C')),
                ('current_a', models.FloatField(default=0, verbose_name='Current at phase A')),
                ('current_b', models.FloatField(default=0, verbose_name='Current at phase B')),
                ('current_c', models.FloatField(default=0, verbose_name='Current at phase C')),
                ('active_power_a', models.FloatField(default=0, verbose_name='Active power at phase A')),
                ('active_power_b', models.FloatField(default=0, verbose_name='Active power at phase B')),
                ('active_power_c', models.FloatField(default=0, verbose_name='Active power at phase C')),
                ('total_active_power', models.FloatField(default=0, verbose_name='Total active power')),
                ('reactive_power_a', models.FloatField(default=0, verbose_name='Reactive power phase A')),
                ('reactive_power_b', models.FloatField(default=0, verbose_name='Reactive power phase B')),
                ('reactive_power_c', models.FloatField(default=0, verbose_name='Reactive power phase C')),
                ('total_reactive_power', models.FloatField(default=0, verbose_name='Total reactive power')),
                ('apparent_power_a', models.FloatField(default=0, verbose_name='Apparent power on phase A')),
                ('apparent_power_b', models.FloatField(default=0, verbose_name='Apparent power on phase B')),
                ('apparent_power_c', models.FloatField(default=0, verbose_name='Apparent power on phase C')),
                ('total_apparent_power', models.FloatField(default=0, verbose_name='Total apparent power')),
                ('power_factor_a', models.FloatField(default=0, verbose_name='Power factor on phase A')),
                ('power_factor_b', models.FloatField(default=0, verbose_name='Power factor on phase B')),
                ('power_factor_c', models.FloatField(default=0, verbose_name='Power factor on phase C')),
                ('total_power_factor', models.FloatField(default=0, verbose_name='Total power factor')),
                ('dht_voltage_a', models.FloatField(default=0, verbose_name='DHT voltage on phase A')),
                ('dht_voltage_b', models.FloatField(default=0, verbose_name='DHT voltage on phase B')),
                ('dht_voltage_c', models.FloatField(default=0, verbose_name='DHT voltage on phase C')),
                ('dht_current_a', models.FloatField(default=0, verbose_name='DHT current on phase A')),
                ('dht_current_b', models.FloatField(default=0, verbose_name='DHT current on phase B')),
                ('dht_current_c', models.FloatField(default=0, verbose_name='DHT current on phase C')),
            ],
            options={
                'verbose_name': 'Minutely measurement',
            },
        ),
        migrations.CreateModel(
            name='MonthlyMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_date', models.DateTimeField(help_text='This field is required', verbose_name='Collection time')),
                ('generated_energy_peak_time', models.FloatField(default=0)),
                ('generated_energy_off_peak_time', models.FloatField(default=0)),
                ('consumption_peak_time', models.FloatField(default=0)),
                ('consumption_off_peak_time', models.FloatField(default=0)),
                ('inductive_power_peak_time', models.FloatField(default=0)),
                ('inductive_power_off_peak_time', models.FloatField(default=0)),
                ('capacitive_power_peak_time', models.FloatField(default=0)),
                ('capacitive_power_off_peak_time', models.FloatField(default=0)),
                ('active_max_power_peak_time', models.FloatField(default=0)),
                ('active_max_power_off_peak_time', models.FloatField(default=0)),
                ('reactive_max_power_peak_time', models.FloatField(default=0)),
                ('reactive_max_power_off_peak_time', models.FloatField(default=0)),
                ('active_max_power_list_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), default=None, size=None)),
                ('active_max_power_list_peak_time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), default=None, size=None)),
                ('active_max_power_list_off_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), default=None, size=None)),
                ('active_max_power_list_off_peak_time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), default=None, size=None)),
                ('reactive_max_power_list_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), default=None, size=None)),
                ('reactive_max_power_list_peak_time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), default=None, size=None)),
                ('reactive_max_power_list_off_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), default=None, size=None)),
                ('reactive_max_power_list_off_peak_time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), default=None, size=None)),
            ],
            options={
                'verbose_name': 'Measurement',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuarterlyMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_date', models.DateTimeField(help_text='This field is required', verbose_name='Collection time')),
                ('generated_energy_peak_time', models.FloatField(default=0, verbose_name='Generated energy on peak hours')),
                ('generated_energy_off_peak_time', models.FloatField(default=0, verbose_name='Generated energy not on peak hours')),
                ('consumption_peak_time', models.FloatField(default=0, verbose_name='Consumption on peak hours')),
                ('consumption_off_peak_time', models.FloatField(default=0, verbose_name='Consumption not on peak hours')),
                ('inductive_power_peak_time', models.FloatField(default=0, verbose_name='Inductive power on peak hours')),
                ('inductive_power_off_peak_time', models.FloatField(default=0, verbose_name='Inductive power not on peak hours')),
                ('capacitive_power_peak_time', models.FloatField(default=0, verbose_name='Capacitive power on peak hours')),
                ('capacitive_power_off_peak_time', models.FloatField(default=0, verbose_name='Capacitive power not on peak hours')),
            ],
            options={
                'verbose_name': 'Quartely measurement',
            },
        ),
        migrations.CreateModel(
            name='RealTimeMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_date', models.DateTimeField(help_text='This field is required', verbose_name='Collection time')),
                ('voltage_a', models.FloatField(default=0, verbose_name='Voltage on phase A')),
                ('voltage_b', models.FloatField(default=0, verbose_name='Voltage on phase B')),
                ('voltage_c', models.FloatField(default=0, verbose_name='Voltage on phase C')),
                ('current_a', models.FloatField(default=0, verbose_name='Current on phase A')),
                ('current_b', models.FloatField(default=0, verbose_name='Current on phase B')),
                ('current_c', models.FloatField(default=0, verbose_name='Current on phase C')),
                ('total_active_power', models.FloatField(default=0, verbose_name='Total active power')),
                ('total_reactive_power', models.FloatField(default=0, verbose_name='Total reactive power')),
                ('total_power_factor', models.FloatField(default=0, verbose_name='Total power factor')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_measurements.realtimemeasurement_set+', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Real time measurement',
            },
        ),
    ]
